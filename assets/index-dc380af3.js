(function(){const o=document.createElement("link").relList;if(o&&o.supports&&o.supports("modulepreload"))return;for(const e of document.querySelectorAll('link[rel="modulepreload"]'))l(e);new MutationObserver(e=>{for(const t of e)if(t.type==="childList")for(const c of t.addedNodes)c.tagName==="LINK"&&c.rel==="modulepreload"&&l(c)}).observe(document,{childList:!0,subtree:!0});function s(e){const t={};return e.integrity&&(t.integrity=e.integrity),e.referrerPolicy&&(t.referrerPolicy=e.referrerPolicy),e.crossOrigin==="use-credentials"?t.credentials="include":e.crossOrigin==="anonymous"?t.credentials="omit":t.credentials="same-origin",t}function l(e){if(e.ep)return;e.ep=!0;const t=s(e);fetch(e.href,t)}})();const i=["Hello","Bonjour","こんにちは","Hallo","Hola","你好"],u=document.querySelector(".hello");let n=0;u.textContent=i[n];setInterval(()=>{n=(n+1)%i.length,u.textContent=`${i[n]}`},2e3);const d=(r,o)=>{r.forEach(s=>{s.target.classList.toggle("is-inViewport",s.isIntersecting)})},f=new IntersectionObserver(d),a={};document.querySelectorAll("progress").forEach(r=>{f.observe(r,a)});
